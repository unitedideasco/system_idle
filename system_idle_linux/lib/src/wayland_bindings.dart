// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Provides bindings to the Wayland-based idle detection (`src/wayland.h`)
///
/// To regenerate, run `dart run ffigen --config wayland-ffigen.yaml`
class SystemIdleWaylandBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SystemIdleWaylandBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SystemIdleWaylandBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<WaylandPlugin> createPlugin() {
    return _createPlugin();
  }

  late final _createPluginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<WaylandPlugin> Function()>>(
          'createPlugin');
  late final _createPlugin =
      _createPluginPtr.asFunction<ffi.Pointer<WaylandPlugin> Function()>();

  void freePlugin(
    ffi.Pointer<WaylandPlugin> plugin,
  ) {
    return _freePlugin(
      plugin,
    );
  }

  late final _freePluginPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WaylandPlugin>)>>(
      'freePlugin');
  late final _freePlugin =
      _freePluginPtr.asFunction<void Function(ffi.Pointer<WaylandPlugin>)>();

  bool initPlugin(
    ffi.Pointer<WaylandPlugin> plugin,
    IdleCallback callback,
  ) {
    return _initPlugin(
      plugin,
      callback,
    );
  }

  late final _initPluginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<WaylandPlugin>, IdleCallback)>>('initPlugin');
  late final _initPlugin = _initPluginPtr
      .asFunction<bool Function(ffi.Pointer<WaylandPlugin>, IdleCallback)>();

  bool listenForIdleEvents(
    ffi.Pointer<WaylandPlugin> plugin,
    int duration_ms,
  ) {
    return _listenForIdleEvents(
      plugin,
      duration_ms,
    );
  }

  late final _listenForIdleEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<WaylandPlugin>, ffi.Int)>>('listenForIdleEvents');
  late final _listenForIdleEvents = _listenForIdleEventsPtr
      .asFunction<bool Function(ffi.Pointer<WaylandPlugin>, int)>();

  void pollEvents(
    ffi.Pointer<WaylandPlugin> plugin,
  ) {
    return _pollEvents(
      plugin,
    );
  }

  late final _pollEventsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WaylandPlugin>)>>(
      'pollEvents');
  late final _pollEvents =
      _pollEventsPtr.asFunction<void Function(ffi.Pointer<WaylandPlugin>)>();
}

final class WaylandPlugin extends ffi.Opaque {}

typedef IdleCallback = ffi.Pointer<ffi.NativeFunction<IdleCallbackFunction>>;
typedef IdleCallbackFunction = ffi.Void Function(ffi.Bool isIdle);
typedef DartIdleCallbackFunction = void Function(bool isIdle);
